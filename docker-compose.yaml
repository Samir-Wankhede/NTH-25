services:
  data-init:
    build: ./data-init
    volumes: 
      - letsencrypt:/etc/letsencrypt
      - certbot_challenges:/var/www/certbot

  nginx-certbot:
    build: ./nginx-certbot
    volumes:
      - certbot_challenges:/var/www/certbot
    ports:
      - "80:80"
    depends_on:
      data-init:
        condition: service_completed_successfully

# remove volumes and --keep-until-expiring from certbot command when want to create a new certificate and add it once certificate created (add --force-renewal instead if it presents an interactive screen)
  certbot:
    image: certbot/certbot
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot_challenges:/var/www/certbot
    entrypoint: >
      sh -c "certbot certonly --webroot --webroot-path=/var/www/certbot 
      --email wankhedesamirforwork@gmail.com --agree-tos --no-eff-email 
      --keep-until-expiring -d nth.credenz.co.in && echo 'âœ… Certbot finished successfully!'"
    depends_on:
      nginx-certbot:
        condition: service_started
  
  shutdown-nginx-certbot:
    image: alpine
    depends_on:
      certbot:
        condition: service_completed_successfully
    command: >
      sh -c "echo 'Certbot finished, triggering nginx-certbot shutdown...' && 
      sleep 2 && 
      kill -TERM 1"
    pid: "service:nginx-certbot"

  frontend:
    build: 
      context: ./frontend
      dockerfile: ./frontend/dockerfile
      args:
        - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      data-init:
        condition: service_completed_successfully
    restart: unless-stopped

  nginx:
    build: ./nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot_challenges:/var/www/certbot
    depends_on:
      frontend:
        condition: service_started
      shutdown-nginx-certbot:
        condition: service_completed_successfully
    restart: always

volumes:
  letsencrypt:
  certbot_challenges:
