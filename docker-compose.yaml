services:
  data-init:
    build: ./data-init
    volumes: 
      - data_volume:/data
      - letsencrypt:/etc/letsencrypt
      - certbot_challenges:/var/www/certbot

  certbot:
    image: certbot/certbot
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot_challenges:/var/www/certbot
    entrypoint: >
      sh -c "certbot certonly --webroot --webroot-path=/var/www/certbot 
      --email your-email@example.com --agree-tos --no-eff-email 
      --staging -d nthhost.credenz.co.in && echo 'âœ… Certbot finished successfully!'"
    depends_on:
      data-init:
        condition: service_completed_successfully

  certbot-renew:
    image: certbot/certbot
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot_challenges:/var/www/certbot
    entrypoint: >
      sh -c "while :; do certbot renew --webroot --webroot-path=/var/www/certbot && nginx -s reload; sleep 12h; done"
    depends_on:
      certbot:
        condition: service_completed_successfully
    restart: unless-stopped

  admin:
    build: ./admin
    ports: 
      - "4788:4000"
    volumes:
      - data_volume:/data
    env_file:
      - .env
    depends_on:
      certbot-renew:
        condition: service_started
    restart: unless-stopped

  backend:
    build: ./backend
    ports: 
      - "5789:3000"
    volumes:
      - data_volume:/data
    env_file:
      - .env
    depends_on:
      certbot-renew:
        condition: service_started
    restart: unless-stopped

  nginx:
    build: ./nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot_challenges:/var/www/certbot
    depends_on:
      - backend
      - admin
    restart: always

volumes:
  data_volume:
  letsencrypt:
  certbot_challenges:
