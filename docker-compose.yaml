services:

  nginx-certbot:
    build: ./nginx-certbot
    volumes:
      - certbot_challenges:/var/www/certbot
    ports:
      - "80:80"

# remove volumes and --keep-until-expiring from certbot command when want to create a new certificate and add it once certificate created (add --force-renewal instead if it presents an interactive screen)
  certbot:
    image: certbot/certbot
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot_challenges:/var/www/certbot
    entrypoint: >
      sh -c "certbot certonly --webroot --webroot-path=/var/www/certbot 
      --email some@gmail.com --agree-tos --no-eff-email 
      --keep-until-expiring -d nthbackend.api.credenz.co.in && echo 'âœ… Certbot finished successfully!'"
    depends_on:
      nginx-certbot:
        condition: service_started
  
  shutdown-nginx-certbot:
    image: alpine
    depends_on:
      certbot:
        condition: service_completed_successfully
    command: >
      sh -c "echo 'Certbot finished, triggering nginx-certbot shutdown...' && 
      sleep 2 && 
      kill -TERM 1"
    pid: "service:nginx-certbot"

  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - "6969:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command:
      - "postgres"
      - "-c"
      - "listen_addresses=*"
      - "-c"
      - "port=5432"


  backend:
    build: ./backend
    ports: 
      - "5789:3000"
    env_file:
      - .env
    depends_on:
      - postgres
    restart: unless-stopped

  admin:
    build: ./admin
    ports: 
      - "4788:4000"
    env_file:
      - .env
    depends_on:
      - postgres
      - backend
    restart: unless-stopped

  nginx:
    build: ./nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot_challenges:/var/www/certbot
    depends_on:
      backend:
        condition: service_started
      admin:
        condition: service_started
      shutdown-nginx-certbot:
        condition: service_completed_successfully
    restart: always

volumes:
  postgres_data:
  letsencrypt:
  certbot_challenges:
